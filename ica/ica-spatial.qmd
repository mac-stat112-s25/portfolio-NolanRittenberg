---
title: "Spatial Viz"
---

Use this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.


```{r}
#install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
#devtools::install_github("ropensci/rnaturalearthhires")
```


```{r}
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)
```

```{r}
ggplot(energy, aes(x = therms)) +
  geom_histogram() + 
  labs(x = "Range and Typical Energy Used Each Month") + 
  theme_minimal()
```


```{r}
ggplot(energy, aes(x = date, y = therms)) + 
  geom_line() 

```

```{r}
ggplot(energy, aes(x = renovated, y = therms)) + 
  geom_boxplot() + 
  facet_wrap(~ renovated) 
  

```


```{r}
fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

# Check it out
head(fave_places)


# Load the leaflet package
library(leaflet)

# Just a plotting frame
leaflet(data = fave_places) |>
  addTiles() |>
  addMarkers(lng = ~longitude, lat = ~latitude)

```


```{r}
library(gplots)

leaflet(data = fave_places) |>
  addTiles() |>
    addCircles(color = col2hex("red"))
```




```{r}
library(gplots)

leaflet(data = fave_places) |>
  addProviderTiles("USGS") |>
  addCircles(weight = 5, opacity = 1, color = col2hex("yellow")) |>
  addPolylines(
    lng = ~longitude,
    lat = ~latitude,
    color = col2hex("green")
  )

# addProviderTiles() changes the base map
```


```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")

# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
```



```{r}
# Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")


# What does this code produce?
# What geom are we using for the point map?
ggplot(world_boundaries) + 
  geom_sf()

# Load package needed to change map theme
library(mosaic)

# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# How does this change how we use geom_point?!
ggplot(world_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, color = "darkgreen"
  ) +
  theme_map()

# The most 'starbucks dense" places are on the east coast and west coast of the unites states. Also East Asia is 'starbucks dense"

```


```{r}
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))

cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")

#ggplot(cma_boundaries) + 
 # geom_sf() + 
  #geom_point(
   # data = starbucks_cma
    #aes(x = Longitude, y = Latitude),
    #alpha = 0.3, 
    #size = 0.2
    #color = "darkgreen"
  #) + 
  #coord_sf(xlim = c(-179.14, -50)) + 
  #theme_map()

# Add the points
# And zoom in
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  theme_map()
```

```{r}
# Exercise 6 

starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))

# Load packages
library(sf)
library(maps)

# Get the boundaries
midwest_boundaries <- st_as_sf(
  maps::map("county",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE))

# Check it out
head(midwest_boundaries)

ggplot()





ggplot(midwest_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_midwest,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  theme_map()
```


```{r}


# Point map (we made this earlier)
# Point map (we made this earlier)
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()

# What changed in the plot?
# What changed in our code?!
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_density_2d(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
```
The countour map changes the starbucks data into topographical lines instead of dots. 


```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")

# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))


# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")

# Check it out
head(states_map)
```

```{r}
# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))

# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
```


```{r}
# ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
#   geom_map(map = county_map) +
#   scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
#   expand_limits(x = county_map$long, y = county_map$lat) +
#   theme_map() +
#   theme(legend.position = "right") + 
#   coord_equal()
```




