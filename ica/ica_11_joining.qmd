---
title: "ica_11_joining"
format: html
---

```{r}
students_1 <- data.frame(
  student = c("A", "B", "C"),
  class = c("STAT 101", "GEOL 101", "ANTH 101")
)

# Check it out
students_1

enrollments_1 <- data.frame(
  class = c("STAT 101", "ART 101", "GEOL 101"),
  enrollment = c(18, 17, 24)
)

# Check it out
enrollments_1
```


```{r}
library(tidyverse)
students_1 |> 
  left_join(enrollments_1)

# left_join() joined the left table and the right table. 
```



```{r}
students_1 |> 
  inner_join(enrollments_1)

# inner_join() also joined the left table and right table. 
```



```{r}
students_1 |> 
  full_join(enrollments_1)

# full_join joined all of the rows from each table but has some N/A values. 
```


Notes: 
- mutating joins add new variables (columns) to the left data table from matching observations in the right table. 

- common mutating joins: 

left_join(): keeps all observations from the left, but discards any observations in the right that do not match the left.

inner_join(): keeps only the observations from the left with a match in the right. 

full_join(): keeps all observations from the left and the right (less common than left_join() and inner_join())



```{r}
students_1 |> 
  semi_join(enrollments_1)
```

```{r}
students_1 |> 
  anti_join(enrollments_1)
```


semi_join() discards any observations in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case. 

anti_join() discards any observations in the left table that do not have a match in the right table. 


Exercises:


```{r}
students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2
```


```{r}
enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2
```

```{r}
# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.
students_2 |> 
  left_join(enrollments_2, join_by(class == course))

```

```{r}
# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
students_2 |> 
  left_join(, join_by(course == class))
```

```{r}
# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
students_2 |> 
  left_join(enrollments_2, join_by(course == class))
```

```{r}
# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3
```


```{r}
# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3
```



```{r}
students_3 |> 
  left_join(enrollments_3)
```


```{r}
students_3 |> 
  left_join(enrollments_3, join_by(class == class))
```


```{r}
# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

voters
```
```{r}
# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

contact
```



```{r}
# 1. We want contact info for people who HAVEN'T voted
voters |>
  left_join(contact, join_by(id == name))

# 2. We want contact info for people who HAVE voted
voters |>
  right_join(contact)

# 3. We want any data available on each person


# 4. When possible, we want to add contact info to the voting roster
```









